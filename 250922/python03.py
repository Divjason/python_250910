"""
1. 변수
2. 기본 자료형 (*원시타입)
3. 연산자
4. 심화 자료형 - 문자열 (*참조타입)
5. 심화 자료형 - 리스트 (*참조타입)
6. 심화 자료형 - 튜플 (*참조타입)
7. 심화 자료형 - 딕셔너리 (*참조타입)
8. 심화 자료형 - 세트 (*참조타입)
9. 조건문
10. 반복문
11. 함수 = function = 기능
"""

# 함수는 왜 필요한가?
# 코드의 행이 길어질 수록 코드상 에러가 발생했을 때, 해당 에러 찾기가 어려움
# 디버깅 쉽지 않음
# 어떤 기능을 1회적으로만 사용하는 것이 아니라, 어떤 특정 상황에 닥칠 때마다
# 반복적으로 해당 기능을 사용해야하는 경우 => 기능 구현 매번 코드 작성 비효율성
# 함수를 1개 만들어놓고, 그 상황을 마주할 때마다 가져다가 사용하자!

# 함수 => 선언 (생성, 만든다) & 호출 (생성된 그 함수를 불러온다)
# 반환 = (돌려줄 때)값을 가질 수도 있다 => 함수안에서 무언가의 연산이 이루어졌다면, 그 연산의 결과값을 가져다가 사용하고 싶다 => 함수가 종료되는 시점에
# 반환값을 찾아와야 한다!! => 반환값이 늘 항상 필수 x
# 함수안에 반드시 return 구문 반드시 있어야 함!
# return => 종결 = 종료 => 돌려주겠다는 의미와 유사
# return => 값을 반환, 돌려준다!!
# break => 반복순회 하는 구문

# 매개변수 => 함수를 선언하는 단계 만약, 특정 값을 받아와야지만, 함수가 실행될 수 있도록 하고자 할 때,
# 함수의 선언부에서 반드시 매개변수를 사전에 선언!!!

# 훗날 함수를 직접 호출하는 경우에 반드시 매개변수의 갯수와 일치하는 인자값을 입력해줘야지만 함수가 에러가 나지
# 않고 정상적으로 실행될 수 있음

# 기본매개변수 => 만약 매개변수 2개를 선언, 인자값 1개 적용 => 2개중 1개를 기본매개변수선언 => 1개를 기본값으로 설정한 매개변수 적용해서 함수 구문의 에러 x

# lambda 식 => 익명함수

# 실행문, 표현식문

def function1() :
    print("함수1 호출")

function1()
function1()
function1()
function1()

def function2(a, b = 0) :
    print(f"a + b = {a + b}")

function2(1, 2)
function2(4, 5)
function2(4)

def function3(a, b) :
    return a + b

r = function3(3, 5)
print(f"함수의 반환값은 {r}")