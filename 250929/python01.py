# 파이썬 = 객체지향 언어
# 객체지향 언어 VS 절차지향 언어 (*OOP VS PP)
# 객체지향 프로그래밍 언어 = Object Oriented Programming Language
# OOP
# 절차지향 프로그래밍 언어 = Procedural Programming Language
# PP

# 함수
def print_string(data) :
    print(data)

print_string("Python")

# 문자열을 쪼개서 리스트 형식 변환
string = "Hello World"
str_list = string.split()
print(str_list)

# 영단어() => 함수!!!

# 클래스를 활용해서 문자열 형태의 자료구조를 정의할 때, 문자열은
# 애초에 split()이라는 함수를 사용하면 특정 구분자에 맞춰서 값이 쪼개지고,
# 쪼개진 값은 리스트 형태의 자료구조에 한개씩 담을 수 있도록 사전에 설정
# 되었기 때문에 우리가 직접 선언한 적이 없지만 사용가능!

# 개발자 => 문자열 => 특정 구분자에 따라서 나누어지게 되면 각 요소를
# 매번 위와 같은 반복적인 행위를 하지 않아도 되게끔 사전 설계!!

# 비록 우리가 파이썬 언어를 창시한 개발자는 아니지만, 만약 반복적인
# 어떤 코드를 작성해야 한다면, 굳이 매번 코드를 사용하지말고, 클래스를
# 만들어놓고 필요할 때마다 가져다가 사용한다면?!

# 1990년대 이전에는 대부분의 언어가 거의 절차지향 언어!!!
# C언어, 포트란, 코볼, 파스칼 등등
# 절차를 굉장히 중요시
# 만약 "냉장고에 코끼리를 넣는다"!!!
# 100마리라면?

# 1.냉장고에 문을 연다
# 2.코끼리를 냉장고에 넣는다
# 3.냉장고 문을 닫는다

# 사전에 어떤 액션, 이벤트에 대한 약속 => 객체단위로 쪼개서

# 웹 & 앱 사용자들에게 제공해줘야하는 기능이 많아지기 시작함
# 절차지향 언어를 활용해서 매번 하드코딩하듯이 코드를 작성하기가 매우
# 번거롭고, 비효율적인 작업
# 중간에 95번째까지 문제가 없다가 96번째에 살짝 졸아서 코드 오타

# 코끼리라는 동물에 대한 사전 정보를 "메뉴얼"로 만들어놓는다.
# 해당 메뉴얼을 기반으로 코끼리1라는 객체를 만듭니다.
# 냉장고라는 사물에 대한 사전 정보를 "메뉴얼"로 만들어놓는다.
# 해당 메뉴얼을 기반으로 냉장고1이라는 객체를 만듭니다.
# 코끼리1 객체의 기능을 호출해서 냉장고1 객체의 문을 연다.
# 코끼리1 객체의 기능을 호출해서 냉장고1 객체안으로 들어가게 만듭니다.
# 코끼리1 객체의 기능을 호출해서 냉장고1 객체의 문을 닫습니다.

# 위에서 사전에 만들어놓은 메뉴얼을 활용해서 코끼리 객체1 ~ 코끼리 객체100
# 냉장고도 메뉴얼을 활용해서 100개를 만들어서 코끼리 들어오면 공간을 생성!

# 현재 인기있는 대다수의 언어들은 모두 객체지향언어
# Java, C++, C#, Python, JS, TS, React
# C언어

# 객체지향언어 클래스라는 것을 활용해서 메뉴얼
# 속성, 메서드 함수

class Student :
    # 생성자함수 => 클래스라는 메뉴얼을 통해서 생성될 객체를 완성하기 위한 목적
    # 클래스를 통해서 만들어질 객체를 인스턴스 객체
    def __init__(self, name, grade) :
        self.name = name
        self.grade = grade
    # 메서드함수
    def study(self) :
        print(f"{self.name}가 공부합니다.")
    def take_exam(self, subject) :
        print(f"{self.name}가 {subject}시험을 봅니다.")


student1 = Student("David", 3)
student2 = Student("Dave", 2)

print(student1.name, student1.grade, student2.name, student2.grade)
